ARG NODE_VERSION="iron"
ARG ALPINE_VERSION="3.20"

# Base image
FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION}

# Set environment variables
ENV LOCAL=true
ENV SENTRY_RELEASE=development
ENV NODE_ENV="development"

# Install dependencies
RUN apk add --no-cache python3 make g++ curl openssl git

# Install pnpm and pm2 globally
RUN npm install pnpm@9.4.0 pm2 -g

# Set architecture and Docker Compose version
ARG TARGETARCH="amd64"  # Default to amd64 if TARGETARCH is not provided
ARG DOCKER_COMPOSE_VERSION="v2.29.7"
ENV TARGETARCH=${TARGETARCH}

# Workdir for the app
WORKDIR /app

# Echo the target architecture
RUN echo "Building for ${TARGETARCH}"

# Download the appropriate Docker Compose binary based on the architecture
RUN if [ "${TARGETARCH}" = "arm64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-aarch64"; \
  elif [ "${TARGETARCH}" = "amd64" ]; then \
  curl -L -o docker-binary "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-linux-x86_64"; \
  else \
  echo "Unsupported architecture: ${TARGETARCH}" && exit 1; \
  fi

# Make the downloaded Docker Compose binary executable and move it to the correct location
RUN chmod +x docker-binary && mv docker-binary /usr/local/bin/docker-compose

# Copy lockfile first to leverage Docker cache for better efficiency
COPY ./pnpm-lock.yaml ./
RUN pnpm fetch --ignore-scripts

# Copy package.json files for all packages
COPY ./package*.json ./
COPY ./packages/worker/package.json ./packages/worker/package.json
COPY ./packages/shared/package.json ./packages/shared/package.json
COPY ./packages/db/package.json ./packages/db/package.json
COPY ./packages/cache/package.json ./packages/cache/package.json

# Copy other necessary files
COPY ./scripts ./scripts
COPY ./public ./public

# Install dependencies
RUN pnpm install -r --prefer-offline 

# Copy all package files
COPY ./packages ./packages

# Copy migrations for the worker package
COPY ./packages/db/assets/migrations ./packages/worker/assets/migrations

# Copy configuration files
COPY ./tsconfig.json ./tsconfig.json
COPY ./next.config.mjs ./next.config.mjs

# Sentry configuration
COPY ./sentry.client.config.ts ./sentry.client.config.ts

# Copy the start script
COPY ./start.dev.sh ./start.sh

# Start the application
CMD ["sh", "start.sh"]
